# InsightPulse Odoo 19.0 Custom Hardened Image
# Features: Auto-patching, health monitoring, security hardening, OCA compliance
# Target: DigitalOcean App Platform + Self-hosted deployments

# =============================================================================
# Stage 1: Build automation tools and validation
# =============================================================================
FROM python:3.11-slim AS builder

WORKDIR /build

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    git \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy automation scripts
COPY scripts/auto-fix-dependencies.py /build/
COPY scripts/validate-manifests.py /build/
COPY scripts/copy-addons.sh /build/

# Pre-validate automation scripts
RUN python3 -m py_compile auto-fix-dependencies.py && \
    python3 -m py_compile validate-manifests.py && \
    chmod +x copy-addons.sh

# =============================================================================
# Stage 2: Odoo base with system dependencies
# =============================================================================
FROM odoo:19.0

LABEL maintainer="InsightPulse AI <engineering@insightpulseai.com>"
LABEL version="19.0-custom"
LABEL description="Hardened Odoo 19.0 with auto-patching and OCA compliance"

USER root

# =============================================================================
# System Dependencies & Security Hardening
# =============================================================================

# Install all required system packages in one layer
RUN apt-get update && apt-get install -y --no-install-recommends \
    # Python development
    python3-pip \
    python3-dev \
    python3-venv \
    # XML/XSLT processing (Odoo core requirement)
    libxml2-dev \
    libxslt1-dev \
    # LDAP/SASL (authentication)
    libldap2-dev \
    libsasl2-dev \
    # SSL/TLS
    libssl-dev \
    # PostgreSQL client
    libpq-dev \
    postgresql-client \
    # Utilities
    curl \
    wget \
    git \
    gnupg \
    ca-certificates \
    # Image processing (for Odoo reports)
    libjpeg-dev \
    libpng-dev \
    libfreetype6-dev \
    liblcms2-dev \
    libwebp-dev \
    libtiff5-dev \
    # Fonts (for PDF generation)
    fonts-liberation \
    fonts-dejavu-core \
    # Node.js (for asset compilation)
    nodejs \
    npm \
    # Health monitoring
    procps \
    net-tools \
    && rm -rf /var/lib/apt/lists/*

# =============================================================================
# Security Hardening
# =============================================================================

# Create non-root user for running automation scripts
RUN groupadd -r odoo-admin && \
    useradd -r -g odoo-admin -s /bin/bash odoo-admin

# Set secure file permissions
RUN chmod 755 /usr/lib/python3/dist-packages/odoo && \
    chmod -R 755 /usr/lib/python3/dist-packages/odoo/addons

# =============================================================================
# Python Dependencies
# =============================================================================

# Copy requirements files
COPY requirements.txt /tmp/requirements.txt
COPY requirements-auto.txt /tmp/requirements-auto.txt 2>/dev/null || touch /tmp/requirements-auto.txt

# Install Python dependencies with version pinning
RUN pip3 install --no-cache-dir --upgrade pip setuptools wheel && \
    pip3 install --no-cache-dir -r /tmp/requirements.txt && \
    if [ -s /tmp/requirements-auto.txt ]; then \
        pip3 install --no-cache-dir -r /tmp/requirements-auto.txt; \
    fi

# Install additional OCA-recommended packages + SaaS features
RUN pip3 install --no-cache-dir \
    # Code quality
    ruff \
    black \
    # Testing
    pytest \
    pytest-odoo \
    # OCA tools
    click-odoo \
    click-odoo-contrib \
    # Common OCA dependencies
    python-stdnum \
    openpyxl \
    xlsxwriter \
    PyPDF2 \
    reportlab \
    # Performance monitoring
    psutil \
    # Security
    cryptography \
    # SaaS Features
    python-dotenv \
    psycopg2-binary \
    # Multi-tenancy
    redis \
    celery \
    # Backup & restore
    boto3 \
    # API integration
    requests \
    # Monitoring
    prometheus-client

# =============================================================================
# Automation Scripts Installation
# =============================================================================

# Copy automation scripts from builder
COPY --from=builder /build/auto-fix-dependencies.py /usr/local/bin/odoo-autofix
COPY --from=builder /build/validate-manifests.py /usr/local/bin/odoo-validate
COPY --from=builder /build/copy-addons.sh /usr/local/bin/copy-addons

RUN chmod +x /usr/local/bin/odoo-autofix \
             /usr/local/bin/odoo-validate \
             /usr/local/bin/copy-addons

# =============================================================================
# SaaS Parity Scripts
# =============================================================================

# Database manager script (multi-tenancy support)
RUN cat > /usr/local/bin/odoo-db-manager.sh <<'EOF'
#!/bin/bash
# Multi-tenant database manager for Odoo SaaS

set -e

ACTION=$1
DB_NAME=$2

case "$ACTION" in
    create)
        echo "Creating database: $DB_NAME"
        PGPASSWORD=$ODOO_DB_PASSWORD psql -h $ODOO_DB_HOST -U $ODOO_DB_USER -d postgres \
            -c "CREATE DATABASE \"$DB_NAME\" ENCODING 'UTF8' TEMPLATE template0"
        echo "Database $DB_NAME created successfully"
        ;;

    drop)
        echo "Dropping database: $DB_NAME"
        PGPASSWORD=$ODOO_DB_PASSWORD psql -h $ODOO_DB_HOST -U $ODOO_DB_USER -d postgres \
            -c "DROP DATABASE IF EXISTS \"$DB_NAME\""
        echo "Database $DB_NAME dropped successfully"
        ;;

    clone)
        SOURCE_DB=$2
        TARGET_DB=$3
        echo "Cloning database: $SOURCE_DB -> $TARGET_DB"
        PGPASSWORD=$ODOO_DB_PASSWORD psql -h $ODOO_DB_HOST -U $ODOO_DB_USER -d postgres \
            -c "CREATE DATABASE \"$TARGET_DB\" TEMPLATE \"$SOURCE_DB\""
        echo "Database cloned successfully"
        ;;

    backup)
        BACKUP_DIR=${3:-/mnt/backups/database}
        mkdir -p $BACKUP_DIR
        TIMESTAMP=$(date +%Y%m%d_%H%M%S)
        BACKUP_FILE="$BACKUP_DIR/${DB_NAME}_${TIMESTAMP}.sql.gz"

        echo "Backing up database: $DB_NAME to $BACKUP_FILE"
        PGPASSWORD=$ODOO_DB_PASSWORD pg_dump -h $ODOO_DB_HOST -U $ODOO_DB_USER -d $DB_NAME | gzip > $BACKUP_FILE
        echo "Backup completed: $BACKUP_FILE"
        ;;

    restore)
        BACKUP_FILE=$3
        echo "Restoring database: $DB_NAME from $BACKUP_FILE"

        # Drop existing database
        PGPASSWORD=$ODOO_DB_PASSWORD psql -h $ODOO_DB_HOST -U $ODOO_DB_USER -d postgres \
            -c "DROP DATABASE IF EXISTS \"$DB_NAME\""

        # Create new database
        PGPASSWORD=$ODOO_DB_PASSWORD psql -h $ODOO_DB_HOST -U $ODOO_DB_USER -d postgres \
            -c "CREATE DATABASE \"$DB_NAME\" ENCODING 'UTF8' TEMPLATE template0"

        # Restore from backup
        gunzip -c $BACKUP_FILE | PGPASSWORD=$ODOO_DB_PASSWORD psql -h $ODOO_DB_HOST -U $ODOO_DB_USER -d $DB_NAME
        echo "Database restored successfully"
        ;;

    list)
        echo "Listing all databases:"
        PGPASSWORD=$ODOO_DB_PASSWORD psql -h $ODOO_DB_HOST -U $ODOO_DB_USER -d postgres \
            -c "SELECT datname FROM pg_database WHERE datname NOT IN ('postgres', 'template0', 'template1') ORDER BY datname"
        ;;

    *)
        echo "Usage: $0 {create|drop|clone|backup|restore|list} [db_name] [options]"
        exit 1
        ;;
esac
EOF

RUN chmod +x /usr/local/bin/odoo-db-manager.sh

# Automated backup script
RUN cat > /usr/local/bin/odoo-auto-backup.sh <<'EOF'
#!/bin/bash
# Automated backup for Odoo databases and filestore

set -e

BACKUP_DIR=${BACKUP_DIR:-/mnt/backups}
RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-7}
TIMESTAMP=$(date +%Y%m%d_%H%M%S)

echo "Starting automated backup: $TIMESTAMP"

# Backup all databases
if [ "$ODOO_DB_NAME" != "False" ]; then
    DB_LIST=$(PGPASSWORD=$ODOO_DB_PASSWORD psql -h $ODOO_DB_HOST -U $ODOO_DB_USER -d postgres -tAc "SELECT datname FROM pg_database WHERE datname NOT IN ('postgres', 'template0', 'template1')")

    for DB in $DB_LIST; do
        echo "Backing up database: $DB"
        /usr/local/bin/odoo-db-manager.sh backup $DB $BACKUP_DIR/database
    done
fi

# Backup filestore
if [ -d "/var/lib/odoo/filestore" ]; then
    echo "Backing up filestore..."
    tar -czf $BACKUP_DIR/filestore/filestore_$TIMESTAMP.tar.gz -C /var/lib/odoo filestore
    echo "Filestore backup completed"
fi

# Cleanup old backups
echo "Cleaning up backups older than $RETENTION_DAYS days..."
find $BACKUP_DIR -type f -mtime +$RETENTION_DAYS -delete

# Upload to S3 (if configured)
if [ -n "$AWS_S3_BUCKET" ] && [ -n "$AWS_ACCESS_KEY_ID" ]; then
    echo "Uploading backups to S3: $AWS_S3_BUCKET"
    aws s3 sync $BACKUP_DIR s3://$AWS_S3_BUCKET/backups/$(date +%Y%m%d)/ --exclude "*" --include "*.sql.gz" --include "*.tar.gz"
    echo "S3 upload completed"
fi

echo "Automated backup completed: $TIMESTAMP"
EOF

RUN chmod +x /usr/local/bin/odoo-auto-backup.sh

# SaaS tenant provisioning script
RUN cat > /usr/local/bin/odoo-provision-tenant.sh <<'EOF'
#!/bin/bash
# Provision new SaaS tenant with isolated database

set -e

TENANT_NAME=$1
ADMIN_EMAIL=${2:-admin@$TENANT_NAME.local}
ADMIN_PASSWORD=${3:-$(openssl rand -base64 12)}

if [ -z "$TENANT_NAME" ]; then
    echo "Usage: $0 <tenant_name> [admin_email] [admin_password]"
    exit 1
fi

DB_NAME="odoo_${TENANT_NAME}"

echo "Provisioning SaaS tenant: $TENANT_NAME"
echo "Database: $DB_NAME"
echo "Admin Email: $ADMIN_EMAIL"

# Create database
/usr/local/bin/odoo-db-manager.sh create $DB_NAME

# Initialize Odoo database
odoo -c /etc/odoo/odoo.conf -d $DB_NAME -i base --stop-after-init --without-demo=all

# Install default SaaS modules (if available)
if [ -d "/mnt/extra-addons/insightpulse" ]; then
    odoo -c /etc/odoo/odoo.conf -d $DB_NAME -i insightpulse --stop-after-init
fi

# Set admin password
PGPASSWORD=$ODOO_DB_PASSWORD psql -h $ODOO_DB_HOST -U $ODOO_DB_USER -d $DB_NAME \
    -c "UPDATE res_users SET login='$ADMIN_EMAIL' WHERE id=2"

echo "Tenant provisioned successfully!"
echo "Database: $DB_NAME"
echo "Admin: $ADMIN_EMAIL"
echo "Password: $ADMIN_PASSWORD"
echo "URL: https://your-domain.com/web?db=$DB_NAME"
EOF

RUN chmod +x /usr/local/bin/odoo-provision-tenant.sh

# Monitoring and metrics collector
RUN cat > /usr/local/bin/odoo-metrics.py <<'EOF'
#!/usr/bin/env python3
"""
Prometheus metrics exporter for Odoo
Exposes /metrics endpoint on port 9090
"""

import os
import time
import psutil
import psycopg2
from prometheus_client import start_http_server, Gauge, Counter

# Metrics
odoo_active_users = Gauge('odoo_active_users', 'Number of active Odoo users')
odoo_database_size = Gauge('odoo_database_size_bytes', 'Database size in bytes', ['database'])
odoo_memory_usage = Gauge('odoo_memory_usage_bytes', 'Memory usage in bytes')
odoo_cpu_usage = Gauge('odoo_cpu_usage_percent', 'CPU usage percentage')
odoo_http_requests = Counter('odoo_http_requests_total', 'Total HTTP requests')

def collect_metrics():
    """Collect Odoo metrics"""
    try:
        # Database connection
        conn = psycopg2.connect(
            host=os.getenv('ODOO_DB_HOST'),
            port=os.getenv('ODOO_DB_PORT', 5432),
            user=os.getenv('ODOO_DB_USER'),
            password=os.getenv('ODOO_DB_PASSWORD'),
            database='postgres'
        )

        cursor = conn.cursor()

        # Get database sizes
        cursor.execute("""
            SELECT datname, pg_database_size(datname)
            FROM pg_database
            WHERE datname NOT IN ('postgres', 'template0', 'template1')
        """)

        for db_name, size in cursor.fetchall():
            odoo_database_size.labels(database=db_name).set(size)

        # System metrics
        process = psutil.Process()
        odoo_memory_usage.set(process.memory_info().rss)
        odoo_cpu_usage.set(process.cpu_percent(interval=1))

        conn.close()

    except Exception as e:
        print(f"Error collecting metrics: {e}")

if __name__ == '__main__':
    # Start metrics server on port 9090
    start_http_server(9090)
    print("Metrics server started on port 9090")

    while True:
        collect_metrics()
        time.sleep(30)  # Collect every 30 seconds
EOF

RUN chmod +x /usr/local/bin/odoo-metrics.py

# Create health check script
RUN cat > /usr/local/bin/health-check.sh <<'EOF'
#!/bin/bash
# Comprehensive health check for Odoo

set -e

# 1. Check Odoo process is running
if ! pgrep -f "odoo-bin\|odoo" > /dev/null; then
    echo "ERROR: Odoo process not running"
    exit 1
fi

# 2. Check HTTP endpoint
if ! curl -sf http://localhost:8069/web/health > /dev/null; then
    echo "ERROR: Odoo HTTP endpoint not responding"
    exit 1
fi

# 3. Check database connectivity (if configured)
if [ -n "$ODOO_DB_HOST" ]; then
    if ! PGPASSWORD=$ODOO_DB_PASSWORD psql -h $ODOO_DB_HOST -U $ODOO_DB_USER -d $ODOO_DB_NAME -c "SELECT 1" > /dev/null 2>&1; then
        echo "WARNING: Database connectivity issue"
        # Don't fail - might be temporary
    fi
fi

# 4. Check memory usage
MEM_USAGE=$(ps aux | grep -E "odoo-bin|odoo" | awk '{sum+=$6} END {print sum}')
MEM_LIMIT=${ODOO_LIMIT_MEMORY_SOFT:-335544320}
MEM_LIMIT_KB=$((MEM_LIMIT / 1024))

if [ "$MEM_USAGE" -gt "$MEM_LIMIT_KB" ]; then
    echo "WARNING: Memory usage ${MEM_USAGE}KB exceeds soft limit ${MEM_LIMIT_KB}KB"
fi

echo "Health check passed"
exit 0
EOF

RUN chmod +x /usr/local/bin/health-check.sh

# Create addon directory structure with backup volume
RUN mkdir -p /mnt/extra-addons /mnt/backups/database /mnt/backups/filestore && \
    chown -R odoo:odoo /mnt/extra-addons /mnt/backups

# Generate optimized Odoo configuration file
RUN cat > /etc/odoo/odoo.conf <<'EOF'
[options]
# Server configuration
http_port = 8069
workers = 4
max_cron_threads = 2
limit_time_cpu = 600
limit_time_real = 1200
limit_memory_soft = 2147483648
limit_memory_hard = 2684354560
limit_request = 8192

# Database configuration
db_host = ${ODOO_DB_HOST}
db_port = ${ODOO_DB_PORT:-5432}
db_user = ${ODOO_DB_USER}
db_password = ${ODOO_DB_PASSWORD}
db_name = ${ODOO_DB_NAME}
db_maxconn = 64
db_template = template0

# SaaS multi-tenancy
dbfilter = ${ODOO_DB_FILTER:-.*}
list_db = ${ODOO_LIST_DB:-True}

# Addon paths
addons_path = /mnt/extra-addons/insightpulse,/mnt/extra-addons/custom,/mnt/extra-addons/oca,/usr/lib/python3/dist-packages/odoo/addons

# Logging
log_level = ${ODOO_LOG_LEVEL:-info}
log_handler = :INFO
logfile = /var/log/odoo/odoo-server.log

# Security
admin_passwd = ${ODOO_ADMIN_PASSWD}
proxy_mode = ${ODOO_PROXY_MODE:-True}

# Performance
server_wide_modules = base,web
unaccent = True

# Email (optional)
smtp_server = ${ODOO_SMTP_SERVER:-}
smtp_port = ${ODOO_SMTP_PORT:-587}
smtp_ssl = ${ODOO_SMTP_SSL:-False}
smtp_user = ${ODOO_SMTP_USER:-}
smtp_password = ${ODOO_SMTP_PASSWORD:-}

# Redis session store (optional)
enable_redis = ${ODOO_ENABLE_REDIS:-False}
redis_host = ${ODOO_REDIS_HOST:-redis}
redis_port = ${ODOO_REDIS_PORT:-6379}
redis_dbindex = ${ODOO_REDIS_DBINDEX:-1}
redis_pass = ${ODOO_REDIS_PASSWORD:-}
EOF

# Create enhanced entrypoint script with pre-start validation
RUN cat > /entrypoint-custom.sh <<'EOF'
#!/bin/bash
# Enhanced Odoo entrypoint with SaaS features

set -e

echo "=== Odoo SaaS Custom Entrypoint ==="

# 1. Pre-start validation
echo "Running pre-start validation..."
python3 /usr/local/bin/auto-fix-dependencies.py || echo "Warning: Dependency validation issues detected"

# 2. Database initialization check
if [ -n "$ODOO_DB_HOST" ] && [ -n "$ODOO_DB_NAME" ]; then
    echo "Checking database connectivity..."
    until PGPASSWORD=$ODOO_DB_PASSWORD psql -h "$ODOO_DB_HOST" -U "$ODOO_DB_USER" -d postgres -c '\q'; do
        echo "PostgreSQL is unavailable - sleeping 2s"
        sleep 2
    done
    echo "PostgreSQL is up - continuing"
fi

# 3. Auto-backup schedule (if enabled)
if [ "${ODOO_AUTO_BACKUP:-false}" = "true" ]; then
    echo "Scheduling automated backups..."
    (crontab -l 2>/dev/null; echo "0 */6 * * * /usr/local/bin/odoo-auto-backup.sh") | crontab -
fi

# 4. Start Prometheus metrics exporter (if enabled)
if [ "${ODOO_METRICS_ENABLED:-false}" = "true" ]; then
    echo "Starting Prometheus metrics exporter on port 9090..."
    /usr/local/bin/odoo-metrics.py &
fi

# 5. Execute original Odoo entrypoint
echo "Starting Odoo..."
exec /entrypoint.sh "$@"
EOF

RUN chmod +x /entrypoint-custom.sh

# Set proper file permissions for multi-tenancy security
RUN mkdir -p /var/lib/odoo /var/log/odoo && \
    chown -R odoo:odoo /var/lib/odoo /var/log/odoo /etc/odoo && \
    chmod 750 /var/lib/odoo /var/log/odoo

# Copy automation scripts from builder stage
COPY --from=builder /build/auto-fix-dependencies.py /usr/local/bin/
COPY --from=builder /build/validate-manifests.py /usr/local/bin/
RUN chmod +x /usr/local/bin/auto-fix-dependencies.py /usr/local/bin/validate-manifests.py

# Copy addon directories (conditional)
COPY --chown=odoo:odoo scripts/copy-addons.sh /tmp/copy-addons.sh
RUN chmod +x /tmp/copy-addons.sh

COPY --chown=odoo:odoo addons /tmp/addons
RUN /tmp/copy-addons.sh /tmp/addons /mnt/extra-addons && rm -rf /tmp/addons /tmp/copy-addons.sh

# Switch to odoo user for security
USER odoo

# Expose Odoo HTTP port and metrics port
EXPOSE 8069 9090

# Define volumes for persistence
VOLUME ["/var/lib/odoo", "/mnt/extra-addons", "/mnt/backups", "/var/log/odoo"]

# Health check configuration
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /usr/local/bin/health-check.sh || exit 1

# Use custom entrypoint with SaaS features
ENTRYPOINT ["/entrypoint-custom.sh"]
CMD ["odoo"]

# Build metadata
LABEL maintainer="InsightPulse Odoo Team" \
      version="19.0-saas" \
      description="Odoo 19.0 with SaaS parity features: multi-tenancy, auto-backup, monitoring, security hardening" \
      features="multi-tenancy,auto-backup,prometheus-metrics,auto-patching,database-manager,health-checks"

# =============================================================================
# Addon Directory Structure
# =============================================================================

# Create comprehensive addon structure
RUN mkdir -p \
    /mnt/extra-addons/insightpulse \
    /mnt/extra-addons/custom \
    /mnt/extra-addons/oca \
    /mnt/extra-addons/enterprise \
    /mnt/backups/filestore \
    /mnt/backups/database \
    /var/log/odoo

# =============================================================================
# Copy and Validate Addons
# =============================================================================

# Copy addons with validation
COPY addons /tmp/addons

# Run auto-fix before copying
RUN cd /tmp && \
    if [ -d "addons" ]; then \
        echo "Running auto-fix on addons..."; \
        python3 /usr/local/bin/odoo-autofix || echo "Auto-fix completed with warnings"; \
        python3 /usr/local/bin/odoo-validate || echo "Validation completed with warnings"; \
    fi

# Copy addons conditionally
RUN /usr/local/bin/copy-addons /tmp/addons /mnt/extra-addons

# Build dynamic addons-path
RUN ADDONS_PATH="/mnt/extra-addons/insightpulse,/mnt/extra-addons/custom,/mnt/extra-addons/oca"; \
    for addon in bi_superset_agent knowledge_notion_clone web_environment_ribbon web_favicon enterprise; do \
        if [ -d "/mnt/extra-addons/$addon" ]; then \
            ADDONS_PATH="$ADDONS_PATH,/mnt/extra-addons/$addon"; \
        fi; \
    done; \
    ADDONS_PATH="$ADDONS_PATH,/usr/lib/python3/dist-packages/odoo/addons"; \
    echo "$ADDONS_PATH" > /etc/odoo/addons-path.txt && \
    echo "Configured addons path: $ADDONS_PATH"

# =============================================================================
# Odoo Configuration File
# =============================================================================

RUN cat > /etc/odoo/odoo.conf <<'EOF'
[options]
# Database configuration (overridden by environment variables)
db_host = ${ODOO_DB_HOST}
db_port = ${ODOO_DB_PORT}
db_user = ${ODOO_DB_USER}
db_password = ${ODOO_DB_PASSWORD}
db_name = ${ODOO_DB_NAME}
db_maxconn = ${ODOO_DB_MAXCONN}

# Admin password
admin_passwd = ${ODOO_ADMIN_PASSWORD}

# Server configuration
http_port = 8069
workers = ${ODOO_WORKERS}
max_cron_threads = ${ODOO_MAX_CRON_THREADS}

# Memory limits (optimized for 512MB container)
limit_memory_hard = ${ODOO_LIMIT_MEMORY_HARD}
limit_memory_soft = ${ODOO_LIMIT_MEMORY_SOFT}
limit_time_cpu = ${ODOO_LIMIT_TIME_CPU}
limit_time_real = ${ODOO_LIMIT_TIME_REAL}

# Performance
limit_request = 8192
db_maxconn_gevent = 8

# Proxy mode (required for reverse proxy)
proxy_mode = True

# Logging
log_level = info
log_handler = :INFO
logfile = /var/log/odoo/odoo.log

# Security
list_db = False
without_demo = all

# Data directory
data_dir = /var/lib/odoo

# Addons path (loaded from file)
addons_path = $(cat /etc/odoo/addons-path.txt)
EOF

# =============================================================================
# Entrypoint Script with Auto-Patching
# =============================================================================

RUN cat > /usr/local/bin/odoo-entrypoint.sh <<'EOF'
#!/bin/bash
set -e

echo "=========================================="
echo "InsightPulse Odoo 19.0 Custom Container"
echo "=========================================="

# Environment variable substitution in odoo.conf
envsubst < /etc/odoo/odoo.conf > /tmp/odoo.conf.tmp
mv /tmp/odoo.conf.tmp /etc/odoo/odoo.conf

# Run pre-start validation
echo "Running pre-start validation..."
/usr/local/bin/health-check.sh || echo "WARNING: Initial health check failed (container starting)"

# Check if database needs initialization
if [ "$ODOO_DB_NAME" != "False" ]; then
    echo "Checking database connectivity..."

    until PGPASSWORD=$ODOO_DB_PASSWORD psql -h $ODOO_DB_HOST -U $ODOO_DB_USER -d postgres -c "SELECT 1" > /dev/null 2>&1; do
        echo "Waiting for database to be ready..."
        sleep 2
    done

    echo "Database is ready"

    # Check if database exists
    DB_EXISTS=$(PGPASSWORD=$ODOO_DB_PASSWORD psql -h $ODOO_DB_HOST -U $ODOO_DB_USER -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='$ODOO_DB_NAME'")

    if [ "$DB_EXISTS" != "1" ]; then
        echo "Database $ODOO_DB_NAME does not exist. Odoo will create it on first run."
    fi
fi

# Auto-fix check (non-blocking)
echo "Running auto-fix validation..."
cd /mnt/extra-addons && \
    python3 /usr/local/bin/odoo-autofix || echo "Auto-fix completed with warnings"

# Start Odoo
echo "Starting Odoo..."
exec odoo \
    --config=/etc/odoo/odoo.conf \
    "$@"
EOF

RUN chmod +x /usr/local/bin/odoo-entrypoint.sh

# =============================================================================
# File Permissions
# =============================================================================

RUN chown -R odoo:odoo \
    /mnt/extra-addons \
    /mnt/backups \
    /var/log/odoo \
    /var/lib/odoo \
    /etc/odoo

# =============================================================================
# User Switch
# =============================================================================

USER odoo

# =============================================================================
# Working Directory
# =============================================================================

WORKDIR /var/lib/odoo

# =============================================================================
# Exposed Ports
# =============================================================================

EXPOSE 8069 8072

# =============================================================================
# Health Check
# =============================================================================

HEALTHCHECK --interval=30s --timeout=10s --start-period=180s --retries=3 \
    CMD /usr/local/bin/health-check.sh

# =============================================================================
# Volume Mounts
# =============================================================================

VOLUME ["/var/lib/odoo", "/mnt/extra-addons", "/mnt/backups", "/var/log/odoo"]

# =============================================================================
# Entrypoint
# =============================================================================

ENTRYPOINT ["/usr/local/bin/odoo-entrypoint.sh"]

# =============================================================================
# Default Command
# =============================================================================

CMD []

# =============================================================================
# Build Info
# =============================================================================

ARG BUILD_DATE
ARG VCS_REF
ARG VERSION

LABEL org.label-schema.build-date=$BUILD_DATE \
      org.label-schema.vcs-ref=$VCS_REF \
      org.label-schema.version=$VERSION \
      org.label-schema.schema-version="1.0" \
      org.label-schema.vendor="InsightPulse AI" \
      org.label-schema.name="insightpulse-odoo" \
      org.label-schema.description="Hardened Odoo 19.0 with auto-patching" \
      org.label-schema.url="https://insightpulseai.com" \
      org.label-schema.vcs-url="https://github.com/jgtolentino/insightpulse-odoo"
