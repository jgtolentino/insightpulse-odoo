name: Quality Gate Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:

env:
  ODOO_VERSION: '19.0'
  PYTHON_VERSION: '3.11'
  POSTGRES_VERSION: '16'
  SECURITY_SCAN_SEVERITY: 'CRITICAL,HIGH'
  PERFORMANCE_THRESHOLD_MS: '2000'  # Max acceptable response time

jobs:
  # ============================================================================
  # STAGE 1: STATIC ANALYSIS & LINTING (Shift-Left Testing)
  # ============================================================================
  static-analysis:
    name: Static Analysis & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install linting tools
        run: |
          pip install --upgrade pip
          pip install flake8 pylint pylint-odoo black isort bandit ruff

      - name: Run Ruff (Fast Python Linter)
        run: |
          echo "=== Running Ruff Linter ==="
          ruff check addons/ --output-format=github || exit 1

      - name: Run Flake8 (PEP8 Compliance)
        run: |
          echo "=== Running Flake8 ==="
          flake8 addons/ \
            --max-line-length=88 \
            --extend-ignore=E203,E501,W503 \
            --count \
            --statistics \
            --show-source || exit 1

      - name: Run Pylint-Odoo (Odoo-Specific Checks)
        run: |
          echo "=== Running Pylint-Odoo ==="
          find addons -name '*.py' -not -path '*/tests/*' | \
            xargs pylint \
              --load-plugins=pylint_odoo \
              --disable=all \
              --enable=odoolint \
              --fail-under=8.0 || exit 1

      - name: Run Black (Code Formatting Check)
        run: |
          echo "=== Checking Black Formatting ==="
          black addons/ --check --line-length=88 || exit 1

      - name: Run isort (Import Sorting Check)
        run: |
          echo "=== Checking Import Sorting ==="
          isort addons/ --check-only --profile=black || exit 1

      - name: Run Bandit (Security Vulnerability Scan)
        run: |
          echo "=== Running Bandit Security Scan ==="
          bandit -r addons/ \
            -x */tests/* \
            -ll \
            -f json \
            -o bandit-report.json || exit 1

      - name: Upload Bandit Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bandit-security-report
          path: bandit-report.json

  # ============================================================================
  # STAGE 2: UNIT & INTEGRATION TESTS (Odoo Test Suite)
  # ============================================================================
  unit-integration-tests:
    name: Unit & Integration Tests
    runs-on: ubuntu-latest
    needs: static-analysis
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: odoo
          POSTGRES_PASSWORD: odoo
          POSTGRES_DB: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libxml2-dev libxslt1-dev libldap2-dev libsasl2-dev \
            libssl-dev libpq-dev postgresql-client wkhtmltopdf

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage pytest pytest-cov

      - name: Wait for PostgreSQL
        run: |
          until pg_isready -h localhost -p 5432 -U odoo; do
            echo "Waiting for PostgreSQL..."
            sleep 2
          done

      - name: Run Odoo Unit Tests
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: odoo
          DB_PASSWORD: odoo
        run: |
          echo "=== Running Odoo Unit Tests ==="

          # Create test database
          createdb -h localhost -U odoo test_odoo_unit

          # Run tests with coverage for custom modules
          for module_dir in addons/insightpulse/* addons/custom/*; do
            if [ -f "$module_dir/__manifest__.py" ]; then
              module=$(basename "$module_dir")
              echo "Testing module: $module"

              # Run Odoo tests
              python3 -m coverage run \
                --source=addons \
                --omit='*/tests/*' \
                /usr/bin/odoo \
                -c /etc/odoo/odoo.conf \
                -d test_odoo_unit \
                -i "$module" \
                --test-enable \
                --test-tags=at_install,post_install \
                --stop-after-init \
                --log-level=test || exit 1
            fi
          done

          # Generate coverage report
          coverage report --fail-under=70
          coverage html -d coverage-report/
          coverage json -o coverage.json

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            coverage-report/
            coverage.json

      - name: Comment PR with Coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const coverage = JSON.parse(fs.readFileSync('coverage.json', 'utf8'));
            const totalCoverage = coverage.totals.percent_covered.toFixed(2);

            const comment = `## 📊 Code Coverage Report

**Total Coverage: ${totalCoverage}%**

${totalCoverage >= 70 ? '✅' : '❌'} Coverage threshold: 70%

[View detailed report in artifacts](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})

---
*Automated by Quality Gate Pipeline*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # ============================================================================
  # STAGE 3: END-TO-END (E2E) TESTING (Playwright)
  # ============================================================================
  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: unit-integration-tests
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: odoo
          POSTGRES_PASSWORD: odoo
          POSTGRES_DB: odoo_e2e
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Node.js (for Playwright)
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install Playwright
        run: |
          npm install -D @playwright/test
          npx playwright install --with-deps chromium

      - name: Build Odoo Test Image
        run: |
          docker build -f Dockerfile.test -t insightpulse-odoo:e2e .

      - name: Start Odoo Container
        run: |
          docker run -d \
            --name odoo-e2e \
            --network host \
            -e DB_HOST=localhost \
            -e DB_PORT=5432 \
            -e DB_USER=odoo \
            -e DB_PASSWORD=odoo \
            -e DB_NAME=odoo_e2e \
            insightpulse-odoo:e2e

      - name: Wait for Odoo to be ready
        run: |
          echo "Waiting for Odoo to start..."
          timeout 120 bash -c 'until curl -f http://localhost:8069/web/health; do sleep 5; done'

      - name: Run E2E Tests
        run: |
          echo "=== Running E2E Tests ==="
          npx playwright test tests/e2e/ --reporter=html

      - name: Upload E2E Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-test-report
          path: playwright-report/

      - name: Stop Odoo Container
        if: always()
        run: |
          docker stop odoo-e2e || true
          docker rm odoo-e2e || true

  # ============================================================================
  # STAGE 4: DOCKER IMAGE BUILD & SECURITY SCAN
  # ============================================================================
  build-and-scan:
    name: Build & Security Scan
    runs-on: ubuntu-latest
    needs: [unit-integration-tests, e2e-tests]
    if: github.event_name != 'pull_request' || github.event.pull_request.draft == false
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: insightpulse-odoo:${{ github.sha }}
          outputs: type=docker,dest=/tmp/odoo-image.tar
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Load Docker Image
        run: |
          docker load --input /tmp/odoo-image.tar

      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: insightpulse-odoo:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: ${{ env.SECURITY_SCAN_SEVERITY }}
          exit-code: '1'  # Fail if vulnerabilities found

      - name: Upload Trivy Results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Trivy Vulnerability Summary
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: insightpulse-odoo:${{ github.sha }}
          format: 'table'
          severity: ${{ env.SECURITY_SCAN_SEVERITY }}

      - name: Upload Docker Image
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/odoo-image.tar
          retention-days: 1

  # ============================================================================
  # STAGE 5: PERFORMANCE BENCHMARKING
  # ============================================================================
  performance-tests:
    name: Performance Benchmarking
    runs-on: ubuntu-latest
    needs: build-and-scan
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: odoo
          POSTGRES_PASSWORD: odoo
          POSTGRES_DB: odoo_perf
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install Locust
        run: |
          pip install locust

      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Load and Start Odoo
        run: |
          docker load --input /tmp/odoo-image.tar
          docker run -d \
            --name odoo-perf \
            --network host \
            -e DB_HOST=localhost \
            -e DB_USER=odoo \
            -e DB_PASSWORD=odoo \
            insightpulse-odoo:${{ github.sha }}

          # Wait for Odoo
          timeout 120 bash -c 'until curl -f http://localhost:8069/web/health; do sleep 5; done'

      - name: Run Locust Performance Test
        run: |
          echo "=== Running Performance Benchmarks ==="
          locust \
            -f tests/performance/locustfile.py \
            --host=http://localhost:8069 \
            --users=10 \
            --spawn-rate=1 \
            --run-time=60s \
            --headless \
            --html=performance-report.html \
            --csv=performance-stats

      - name: Check Performance Threshold
        run: |
          # Extract average response time
          AVG_RESPONSE=$(awk -F',' 'NR==2 {print $6}' performance-stats_stats.csv)
          echo "Average response time: ${AVG_RESPONSE}ms"

          if (( $(echo "$AVG_RESPONSE > ${{ env.PERFORMANCE_THRESHOLD_MS }}" | bc -l) )); then
            echo "❌ Performance degradation detected!"
            echo "Average response time (${AVG_RESPONSE}ms) exceeds threshold (${{ env.PERFORMANCE_THRESHOLD_MS }}ms)"
            exit 1
          else
            echo "✅ Performance acceptable"
          fi

      - name: Upload Performance Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: |
            performance-report.html
            performance-stats*.csv

      - name: Stop Odoo Container
        if: always()
        run: |
          docker stop odoo-perf || true
          docker rm odoo-perf || true

  # ============================================================================
  # STAGE 6: PRODUCTION READINESS GATE
  # ============================================================================
  production-readiness:
    name: Production Readiness Gate
    runs-on: ubuntu-latest
    needs: [build-and-scan, performance-tests]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp

      - name: Production Readiness Checklist
        run: |
          echo "=== Production Readiness Checklist ==="

          CHECKS_PASSED=0
          CHECKS_TOTAL=0

          # Check 1: Security scan passed
          ((CHECKS_TOTAL++))
          if [ "${{ needs.build-and-scan.result }}" == "success" ]; then
            echo "✅ Security scan passed"
            ((CHECKS_PASSED++))
          else
            echo "❌ Security scan failed"
          fi

          # Check 2: Performance tests passed
          ((CHECKS_TOTAL++))
          if [ "${{ needs.performance-tests.result }}" == "success" ]; then
            echo "✅ Performance tests passed"
            ((CHECKS_PASSED++))
          else
            echo "❌ Performance tests failed"
          fi

          # Check 3: Docker image size check
          ((CHECKS_TOTAL++))
          docker load --input /tmp/odoo-image.tar
          IMAGE_SIZE=$(docker images insightpulse-odoo:${{ github.sha }} --format "{{.Size}}")
          echo "Docker image size: $IMAGE_SIZE"

          # Assume max size is 2GB
          SIZE_MB=$(docker images insightpulse-odoo:${{ github.sha }} --format "{{.Size}}" | grep -oP '\d+' | head -1)
          if [ "$SIZE_MB" -lt 2000 ]; then
            echo "✅ Docker image size acceptable"
            ((CHECKS_PASSED++))
          else
            echo "❌ Docker image too large"
          fi

          # Check 4: Required environment variables documented
          ((CHECKS_TOTAL++))
          if [ -f "docs/DEPLOYMENT.md" ] || [ -f "README.md" ]; then
            echo "✅ Deployment documentation exists"
            ((CHECKS_PASSED++))
          else
            echo "❌ Missing deployment documentation"
          fi

          echo ""
          echo "=== Summary ==="
          echo "Checks passed: $CHECKS_PASSED/$CHECKS_TOTAL"

          if [ "$CHECKS_PASSED" -eq "$CHECKS_TOTAL" ]; then
            echo "✅ PRODUCTION READY"
            exit 0
          else
            echo "❌ NOT PRODUCTION READY"
            exit 1
          fi

      - name: Create Production Release Tag
        if: success()
        uses: actions/github-script@v7
        with:
          script: |
            const tagName = `production-${new Date().toISOString().split('T')[0]}-${context.sha.substring(0, 7)}`;

            await github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tagName}`,
              sha: context.sha
            });

            console.log(`✅ Created production release tag: ${tagName}`);

  # ============================================================================
  # STAGE 7: QUALITY GATE SUMMARY
  # ============================================================================
  quality-gate-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [static-analysis, unit-integration-tests, e2e-tests, build-and-scan]
    if: always()
    steps:
      - name: Generate Quality Gate Report
        run: |
          echo "# 🎯 Quality Gate Report" > quality-gate-report.md
          echo "" >> quality-gate-report.md
          echo "## Pipeline Status" >> quality-gate-report.md
          echo "" >> quality-gate-report.md
          echo "| Stage | Status |" >> quality-gate-report.md
          echo "|-------|--------|" >> quality-gate-report.md
          echo "| Static Analysis | ${{ needs.static-analysis.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> quality-gate-report.md
          echo "| Unit & Integration Tests | ${{ needs.unit-integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> quality-gate-report.md
          echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> quality-gate-report.md
          echo "| Security Scan | ${{ needs.build-and-scan.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> quality-gate-report.md
          echo "" >> quality-gate-report.md

          ALL_PASSED=true
          [ "${{ needs.static-analysis.result }}" != "success" ] && ALL_PASSED=false
          [ "${{ needs.unit-integration-tests.result }}" != "success" ] && ALL_PASSED=false
          [ "${{ needs.e2e-tests.result }}" != "success" ] && ALL_PASSED=false
          [ "${{ needs.build-and-scan.result }}" != "success" ] && ALL_PASSED=false

          if [ "$ALL_PASSED" == "true" ]; then
            echo "## ✅ Quality Gate: PASSED" >> quality-gate-report.md
            echo "" >> quality-gate-report.md
            echo "All quality checks passed. Code is ready for deployment." >> quality-gate-report.md
          else
            echo "## ❌ Quality Gate: FAILED" >> quality-gate-report.md
            echo "" >> quality-gate-report.md
            echo "One or more quality checks failed. Please review the logs and fix issues." >> quality-gate-report.md
          fi

          cat quality-gate-report.md

      - name: Upload Quality Gate Report
        uses: actions/upload-artifact@v4
        with:
          name: quality-gate-report
          path: quality-gate-report.md

      - name: Comment PR with Quality Gate Results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('quality-gate-report.md', 'utf8');

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: report
            });
