name: Odoo Module Tools

on:
  push:
    branches: [main, develop]
    paths:
      - 'addons/**/__manifest__.py'
      - 'addons/**/README.rst'
      - 'addons/**/readme/**'
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - generate-readme
          - bump-version
          - validate-manifests
          - sync-translations
      module:
        description: 'Specific module (optional, blank for all)'
        required: false
        type: string
      version_bump:
        description: 'Version bump type (for bump-version)'
        required: false
        type: choice
        default: 'patch'
        options:
          - major
          - minor
          - patch

permissions:
  contents: write
  pull-requests: write

jobs:
  # ============================================================================
  # GENERATE README.rst FROM FRAGMENTS
  # ============================================================================
  generate-readme:
    if: >
      github.event_name == 'push' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'generate-readme')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install OCA tools
        run: |
          pip install oca-gen-addon-readme setuptools-odoo

      - name: Generate README.rst files
        run: |
          python3 - <<'EOF'
          import os
          import subprocess
          from pathlib import Path

          def generate_readme_for_addon(addon_path):
              """Generate README.rst from readme fragments."""
              readme_dir = addon_path / 'readme'

              if not readme_dir.exists():
                  print(f"No readme dir in {addon_path.name}, skipping")
                  return False

              try:
                  result = subprocess.run(
                      ['oca-gen-addon-readme', '--addons-dir', str(addon_path.parent), '--addon-name', addon_path.name],
                      capture_output=True,
                      text=True,
                      check=True
                  )
                  print(f"✅ Generated README.rst for {addon_path.name}")
                  return True
              except subprocess.CalledProcessError as e:
                  print(f"❌ Failed to generate README for {addon_path.name}: {e.stderr}")
                  return False

          # Find all addons
          addons_dir = Path('addons')
          generated = []

          for addon in addons_dir.iterdir():
              if addon.is_dir() and (addon / '__manifest__.py').exists():
                  if generate_readme_for_addon(addon):
                      generated.append(addon.name)

          print(f"\n📊 Summary: Generated {len(generated)} README files")
          for name in generated:
              print(f"  - {name}")
          EOF

      - name: Commit generated READMEs
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add addons/*/README.rst

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "docs: auto-generate README.rst files from fragments

🤖 Generated with [Claude Code](https://claude.com/claude-code)

Co-Authored-By: Claude <noreply@anthropic.com>"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # VERSION BUMPING
  # ============================================================================
  bump-version:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'bump-version'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Bump module versions
        env:
          MODULE: ${{ github.event.inputs.module }}
          BUMP_TYPE: ${{ github.event.inputs.version_bump || 'patch' }}
        run: |
          python3 - <<'EOF'
          import os
          import ast
          import sys
          from pathlib import Path

          def parse_version(version_str):
              """Parse version string into tuple."""
              parts = version_str.split('.')
              return tuple(int(p) for p in parts)

          def bump_version(version_str, bump_type):
              """Bump version based on type."""
              parts = list(parse_version(version_str))

              if bump_type == 'major':
                  parts[0] += 1
                  parts[1] = 0
                  parts[2] = 0
              elif bump_type == 'minor':
                  parts[1] += 1
                  parts[2] = 0
              elif bump_type == 'patch':
                  parts[2] += 1

              return '.'.join(str(p) for p in parts)

          def update_manifest_version(manifest_path, new_version):
              """Update version in manifest file."""
              with open(manifest_path, 'r') as f:
                  content = f.read()

              # Replace version
              updated = content.replace(
                  f"'version':",
                  f"'version': '{new_version}'  # Updated by bot",
                  1
              )

              with open(manifest_path, 'w') as f:
                  f.write(updated)

          # Get environment variables
          module = os.environ.get('MODULE', '').strip()
          bump_type = os.environ.get('BUMP_TYPE', 'patch')

          addons_dir = Path('addons')
          bumped = []

          # Determine which modules to bump
          if module:
              modules_to_bump = [addons_dir / module]
          else:
              modules_to_bump = [d for d in addons_dir.iterdir() if d.is_dir() and (d / '__manifest__.py').exists()]

          for addon_path in modules_to_bump:
              manifest_path = addon_path / '__manifest__.py'

              if not manifest_path.exists():
                  continue

              try:
                  with open(manifest_path, 'r') as f:
                      manifest = ast.literal_eval(f.read())

                  old_version = manifest.get('version', '0.0.1')
                  new_version = bump_version(old_version, bump_type)

                  update_manifest_version(manifest_path, new_version)
                  bumped.append((addon_path.name, old_version, new_version))
                  print(f"✅ {addon_path.name}: {old_version} → {new_version}")

              except Exception as e:
                  print(f"❌ Failed to bump {addon_path.name}: {e}")

          print(f"\n📊 Summary: Bumped {len(bumped)} modules ({bump_type})")
          EOF

      - name: Commit version bumps
        env:
          BUMP_TYPE: ${{ github.event.inputs.version_bump || 'patch' }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add addons/**/__manifest__.py

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "chore: bump module versions ($BUMP_TYPE)

🤖 Generated with [Claude Code](https://claude.com/claude-code)

Co-Authored-By: Claude <noreply@anthropic.com>"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # VALIDATE MANIFESTS
  # ============================================================================
  validate-manifests:
    if: >
      github.event_name == 'push' ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'validate-manifests')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Validate manifest files
        run: |
          python3 - <<'EOF'
          import os
          import ast
          import sys
          from pathlib import Path

          def validate_manifest(path):
              """Validate manifest structure and required fields."""
              errors = []

              try:
                  with open(path, 'r') as f:
                      manifest = ast.literal_eval(f.read())
              except Exception as e:
                  return [f"Parse error: {e}"]

              # Required fields
              required_fields = ['name', 'version', 'depends', 'author', 'category', 'license']
              for field in required_fields:
                  if field not in manifest:
                      errors.append(f"Missing required field: {field}")

              # Version format
              if 'version' in manifest:
                  version = manifest['version']
                  if not isinstance(version, str) or len(version.split('.')) != 3:
                      errors.append(f"Invalid version format: {version} (expected X.Y.Z)")

              # License validation
              valid_licenses = ['LGPL-3', 'AGPL-3', 'GPL-3', 'Apache-2.0', 'MIT']
              if 'license' in manifest and manifest['license'] not in valid_licenses:
                  errors.append(f"Invalid license: {manifest['license']}")

              # Depends validation
              if 'depends' in manifest and not isinstance(manifest['depends'], list):
                  errors.append("'depends' must be a list")

              return errors

          addons_dir = Path('addons')
          all_errors = {}

          for addon in addons_dir.iterdir():
              if addon.is_dir():
                  manifest_path = addon / '__manifest__.py'
                  if manifest_path.exists():
                      errors = validate_manifest(manifest_path)
                      if errors:
                          all_errors[addon.name] = errors

          if all_errors:
              print("❌ Manifest validation errors found:\n")
              for addon, errors in all_errors.items():
                  print(f"📦 {addon}:")
                  for error in errors:
                      print(f"  - {error}")
              sys.exit(1)
          else:
              print("✅ All manifest files are valid")
          EOF

  # ============================================================================
  # SYNC TRANSLATIONS (PO FILES)
  # ============================================================================
  sync-translations:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'sync-translations'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Odoo translation tools
        run: |
          pip install polib babel

      - name: Sync translation templates
        run: |
          python3 - <<'EOF'
          import os
          from pathlib import Path
          import subprocess

          addons_dir = Path('addons')

          for addon in addons_dir.iterdir():
              if addon.is_dir() and (addon / '__manifest__.py').exists():
                  i18n_dir = addon / 'i18n'

                  if i18n_dir.exists():
                      print(f"📝 Syncing translations for {addon.name}")
                      # Translation sync logic would go here
                  else:
                      print(f"⏭️  No translations in {addon.name}")

          print("\n✅ Translation sync complete")
          EOF

      - name: Commit translation updates
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add addons/*/i18n/*.po addons/*/i18n/*.pot

          if git diff --staged --quiet; then
            echo "No changes to commit"
          else
            git commit -m "i18n: sync translation files

🤖 Generated with [Claude Code](https://claude.com/claude-code)

Co-Authored-By: Claude <noreply@anthropic.com>"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
