name: Odoo CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, 3.10]
    
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: odoo
          POSTGRES_PASSWORD: odoo
          POSTGRES_DB: odoo
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libxml2-dev libxslt1-dev libldap2-dev libsasl2-dev \
          libssl-dev libpq-dev postgresql-client

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pre-commit pylint-odoo flake8 bandit black isort

    - name: Install Odoo dependencies
      run: |
        pip install -r requirements.txt

    - name: Run pre-commit hooks
      run: |
        pre-commit run --all-files

    - name: Run Odoo module checks
      run: |
        # Check for missing dependencies
        python -c "
        import os
        modules = []
        for root, dirs, files in os.walk('addons'):
            if '__manifest__.py' in files:
                modules.append(root)
        print(f'Found {len(modules)} modules: {modules}')
        "

    - name: Run pylint-odoo
      run: |
        find addons -name '*.py' -not -path '*/tests/*' | xargs pylint-odoo --load-plugins=pylint_odoo -d all -e odoolint

    - name: Run flake8
      run: |
        flake8 addons --max-line-length=88 --extend-ignore=E203,E501,W503

    - name: Run bandit security scan
      run: |
        bandit -r addons -x */tests/* -ll

    - name: Check for missing sequence files
      run: |
        # Verify sequence files are properly referenced in manifests
        python -c "
        import os
        import ast
        
        missing_sequences = []
        for root, dirs, files in os.walk('addons'):
            if '__manifest__.py' in files:
                manifest_path = os.path.join(root, '__manifest__.py')
                with open(manifest_path, 'r') as f:
                    manifest = ast.literal_eval(f.read())
                
                # Check for sequence.xml in data files
                data_files = manifest.get('data', [])
                sequence_files = [f for f in data_files if 'sequence.xml' in f]
                
                # Check if sequence.xml file exists
                for seq_file in sequence_files:
                    seq_path = os.path.join(root, seq_file)
                    if not os.path.exists(seq_path):
                        missing_sequences.append((root, seq_file))
        
        if missing_sequences:
            print('Missing sequence files:')
            for module, seq_file in missing_sequences:
                print(f'  {module}: {seq_file}')
            exit(1)
        else:
            print('All sequence files are present')
        "

    - name: Check for missing cron files
      run: |
        # Verify cron files are properly referenced in manifests
        python -c "
        import os
        import ast
        
        missing_crons = []
        for root, dirs, files in os.walk('addons'):
            if '__manifest__.py' in files:
                manifest_path = os.path.join(root, '__manifest__.py')
                with open(manifest_path, 'r') as f:
                    manifest = ast.literal_eval(f.read())
                
                # Check for cron.xml in data files
                data_files = manifest.get('data', [])
                cron_files = [f for f in data_files if 'cron.xml' in f]
                
                # Check if cron.xml file exists
                for cron_file in cron_files:
                    cron_path = os.path.join(root, cron_file)
                    if not os.path.exists(cron_path):
                        missing_crons.append((root, cron_file))
        
        if missing_crons:
            print('Missing cron files:')
            for module, cron_file in missing_crons:
                print(f'  {module}: {cron_file}')
            exit(1)
        else:
            print('All cron files are present')
        "

    - name: Validate vendor pins
      run: |
        # Check if vendor/oca_repos.lock exists and matches oca_repos.yml
        if [ -f "vendor/oca_repos.yml" ]; then
          echo "Found vendor/oca_repos.yml"
          if [ ! -f "vendor/oca_repos.lock" ]; then
            echo "Warning: vendor/oca_repos.lock not found"
          else
            echo "Found vendor/oca_repos.lock"
          fi
        else
          echo "No vendor/oca_repos.yml found"
        fi

    - name: Check documentation generation
      run: |
        # Test README.rst generation
        pre-commit run oca-gen-addon-readme --all-files
        
        # Check if README.rst files are generated
        find addons -name 'README.rst' | wc -l

    - name: Run Odoo tests (if available)
      run: |
        # This would run actual Odoo tests if test files exist
        echo "Odoo test execution would happen here"
        # docker-compose run odoo odoo --test-enable --stop-after-init

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan
      run: |
        # Additional security checks
        echo "Running security scans..."
        
        # Check for hardcoded secrets
        git secrets --scan
        
        # Check for vulnerable dependencies
        pip list --outdated
        
        echo "Security scan completed"

  documentation-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        pip install pre-commit

    - name: Generate documentation
      run: |
        pre-commit run oca-gen-addon-readme --all-files

    - name: Check documentation completeness
      run: |
        # Verify all modules have README.rst files
        python -c "
        import os
        
        modules_without_readme = []
        for root, dirs, files in os.walk('addons'):
            if '__manifest__.py' in files and 'README.rst' not in files:
                modules_without_readme.append(root)
        
        if modules_without_readme:
            print('Modules missing README.rst:')
            for module in modules_without_readme:
                print(f'  {module}')
            exit(1)
        else:
            print('All modules have README.rst files')
        "

    - name: Validate CHANGELOG.md
      run: |
        # Check if CHANGELOG.md follows keepachangelog format
        if [ -f "CHANGELOG.md" ]; then
          echo "CHANGELOG.md exists and will be validated"
          # Add validation logic here
        else
          echo "CHANGELOG.md not found"
          exit 1
        fi
