name: OCA Module Fetch & Test (Simplified)

on:
  push:
    branches: [main, develop]
    paths:
      - 'vendor/oca_requirements.txt'
      - 'vendor/oca_repos.yml'
      - 'scripts/fetch_oca.sh'
  pull_request:
    branches: [main]
    paths:
      - 'vendor/oca_requirements.txt'
      - 'vendor/oca_repos.yml'
      - 'scripts/fetch_oca.sh'
  schedule:
    - cron: '0 2 * * 1'  # Monday 2 AM
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  ODOO_VERSION: '19.0'

jobs:
  # ============================================================================
  # JOB 1: VALIDATE OCA REQUIREMENTS
  # ============================================================================
  validate-oca-requirements:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate oca_requirements.txt format
        run: |
          echo "=== Validating oca_requirements.txt format ==="

          if [ ! -f "vendor/oca_requirements.txt" ]; then
            echo "Error: vendor/oca_requirements.txt not found"
            exit 1
          fi

          while IFS= read -r line || [ -n "$line" ]; do
            # Skip comments and empty lines
            if [[ -z "$line" ]] || [[ "$line" =~ ^[[:space:]]*# ]]; then
              continue
            fi

            # Validate line format
            if ! echo "$line" | grep -qE '^https://github\.com/OCA/[a-z0-9-]+ [0-9]+\.[0-9]$'; then
              echo "Error: Invalid format in line: $line"
              exit 1
            fi
          done < vendor/oca_requirements.txt

          echo "✓ oca_requirements.txt format is valid"

      - name: Check OCA branch availability
        run: |
          echo "=== Checking OCA branch availability ==="

          while IFS= read -r line || [ -n "$line" ]; do
            if [[ -z "$line" ]] || [[ "$line" =~ ^[[:space:]]*# ]]; then
              continue
            fi

            REPO=$(echo "$line" | cut -d' ' -f1)
            BRANCH=$(echo "$line" | cut -d' ' -f2)
            REPO_NAME=$(basename "$REPO" .git)

            echo "Checking $REPO_NAME branch $BRANCH..."

            if git ls-remote --heads "$REPO" | grep -q "refs/heads/$BRANCH"; then
              echo "✓ Branch $BRANCH exists for $REPO_NAME"
            else
              echo "✗ Branch $BRANCH NOT FOUND for $REPO_NAME"
              exit 1
            fi
          done < vendor/oca_requirements.txt

          echo "✓ All OCA branches are available"

  # ============================================================================
  # JOB 2: TEST OCA FETCH SCRIPT
  # ============================================================================
  test-oca-fetch:
    runs-on: ubuntu-latest
    needs: validate-oca-requirements
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test fetch_oca.sh script
        run: |
          echo "=== Testing fetch_oca.sh script ==="

          bash -n scripts/fetch_oca.sh
          echo "✓ Script syntax is valid"

          mkdir -p /tmp/test_oca_fetch
          bash scripts/fetch_oca.sh vendor/oca_requirements.txt /tmp/test_oca_fetch

          echo "✓ Script executed successfully"

      - name: Verify cloned modules
        run: |
          echo "=== Verifying cloned modules ==="

          REPO_COUNT=$(ls -1d /tmp/test_oca_fetch/*/ 2>/dev/null | wc -l)
          echo "Cloned $REPO_COUNT repositories"

          MODULE_COUNT=$(find /tmp/test_oca_fetch -name "__manifest__.py" | wc -l)
          echo "Found $MODULE_COUNT Odoo modules"

          if [ $MODULE_COUNT -eq 0 ]; then
            echo "Error: No Odoo modules found"
            exit 1
          fi

          echo "✓ Successfully fetched $MODULE_COUNT modules from $REPO_COUNT repos"

      - name: List fetched modules
        run: |
          echo "=== Fetched OCA Modules ==="
          find /tmp/test_oca_fetch -name "__manifest__.py" -exec dirname {} \; | sort

  # ============================================================================
  # JOB 3: BUILD DOCKER WITH OCA
  # ============================================================================
  build-docker-with-oca:
    runs-on: ubuntu-latest
    needs: test-oca-fetch
    if: github.event_name != 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: insightpulse-odoo:test-oca
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          echo "=== Testing Docker Image ==="
          docker images insightpulse-odoo:test-oca

          SIZE=$(docker images insightpulse-odoo:test-oca --format "{{.Size}}")
          echo "Image size: $SIZE"
