name: CI & Deploy

on:
  push:
    branches: [main]
    tags: ['v*.*.*']
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements-dev.txt

      - name: Run pre-commit hooks
        uses: pre-commit/action@v3.0.1

      - name: Run ruff linter
        run: ruff check . --output-format=github
        continue-on-error: true

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: odoo
          POSTGRES_PASSWORD: odoo
          POSTGRES_DB: odoo
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U odoo"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt -r requirements-auto.txt -r requirements-dev.txt

      - name: Run tests with coverage
        env:
          PGHOST: localhost
          PGUSER: odoo
          PGPASSWORD: odoo
          PGDATABASE: odoo
        run: |
          pytest -n auto --cov=addons --cov-report=xml --cov-report=term-missing
        continue-on-error: true

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    needs: [lint, test]
    permissions:
      contents: read
      packages: write
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels)
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix={{branch}}-
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  deploy:
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://insightpulseai.net
    env:
      SSH_HOST: ${{ secrets.PROD_HOST }}
      SSH_USER: ${{ secrets.PROD_SSH_USER }}
      SSH_KEY: ${{ secrets.PROD_SSH_KEY }}
      COMPOSE_DIR: ${{ secrets.PROD_COMPOSE_DIR }}

    steps:
      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_KEY }}

      - name: Add host to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H "${{ secrets.PROD_HOST }}" >> ~/.ssh/known_hosts

      - name: Deploy to production server
        run: |
          ssh ${{ secrets.PROD_SSH_USER }}@${{ secrets.PROD_HOST }} << 'ENDSSH'
          set -euo pipefail

          cd ${{ secrets.PROD_COMPOSE_DIR }}

          echo "üîê Logging in to GitHub Container Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          echo "üì• Pulling latest image..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          echo "üîÑ Updating compose configuration..."
          export ODOO_TAG=latest
          sed -i 's/^ODOO_TAG=.*/ODOO_TAG=latest/' .env 2>/dev/null || echo "ODOO_TAG=latest" >> .env

          echo "üöÄ Rolling update..."
          docker compose -f docker-compose.prod.yml pull odoo
          docker compose -f docker-compose.prod.yml up -d odoo

          echo "‚è≥ Waiting for healthy container..."
          for i in {1..30}; do
            CONTAINER_ID=$(docker compose -f docker-compose.prod.yml ps -q odoo 2>/dev/null || echo "")
            if [ -n "$CONTAINER_ID" ]; then
              HEALTH=$(docker inspect --format='{{.State.Health.Status}}' "$CONTAINER_ID" 2>/dev/null || echo "unknown")
              echo "Health check $i/30: $HEALTH"
              if [ "$HEALTH" = "healthy" ]; then
                echo "‚úÖ Container is healthy!"
                break
              fi
            fi
            sleep 10
            if [ $i -eq 30 ]; then
              echo "‚ùå Container failed to become healthy"
              docker compose -f docker-compose.prod.yml logs --tail=50 odoo
              exit 1
            fi
          done

          echo "üßπ Pruning old images..."
          docker image prune -f --filter "until=72h"

          echo "‚úÖ Deployment complete!"
          ENDSSH

      - name: Verify deployment
        run: |
          sleep 5
          response=$(curl -s -o /dev/null -w "%{http_code}" https://insightpulseai.net/web/health || echo "000")
          if [ "$response" = "200" ]; then
            echo "‚úÖ Health check passed: $response"
          else
            echo "‚ö†Ô∏è  Health check returned: $response"
            exit 1
          fi
