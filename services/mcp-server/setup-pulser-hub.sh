#!/bin/bash
# pulser-hub MCP Server Setup Script
# Helps configure pulser-hub GitHub App credentials

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${GREEN}🚀 pulser-hub MCP Server Setup${NC}"
echo "==============================="
echo ""

# Check if gh CLI is installed
if ! command -v gh &> /dev/null; then
    echo -e "${YELLOW}⚠️  GitHub CLI (gh) not found${NC}"
    echo "Install: https://cli.github.com/"
    echo ""
    echo "Or get credentials manually:"
    echo "1. App ID: https://github.com/settings/apps/pulser-hub"
    echo "2. Installation ID: https://github.com/settings/installations"
    echo "3. Private key: Generate at https://github.com/settings/apps/pulser-hub"
    exit 1
fi

# Check if authenticated
if ! gh auth status &> /dev/null; then
    echo -e "${YELLOW}⚠️  Not authenticated with GitHub${NC}"
    echo "Run: gh auth login"
    exit 1
fi

echo -e "${GREEN}✅ GitHub CLI authenticated${NC}"
echo ""

# Step 1: Get Installation ID
echo -e "${BLUE}Step 1: Getting pulser-hub installation ID...${NC}"

INSTALLATION_JSON=$(gh api /user/installations 2>/dev/null || echo "")

if [ -z "$INSTALLATION_JSON" ]; then
    echo -e "${RED}❌ Failed to get installations${NC}"
    echo "Get manually: https://github.com/settings/installations"
    exit 1
fi

# Try to find pulser-hub
INSTALLATION_ID=$(echo "$INSTALLATION_JSON" | jq -r '.installations[] | select(.app_slug=="pulser-hub") | .id' 2>/dev/null || echo "")

if [ -z "$INSTALLATION_ID" ]; then
    echo -e "${YELLOW}⚠️  pulser-hub not found in installations${NC}"
    echo ""
    echo "Available installations:"
    echo "$INSTALLATION_JSON" | jq -r '.installations[] | "\(.app_slug) (ID: \(.id))"'
    echo ""
    read -p "Enter pulser-hub installation ID manually: " INSTALLATION_ID

    if [ -z "$INSTALLATION_ID" ]; then
        echo -e "${RED}❌ Installation ID required${NC}"
        exit 1
    fi
fi

echo -e "${GREEN}✅ Installation ID: $INSTALLATION_ID${NC}"
echo ""

# Step 2: Get App ID
echo -e "${BLUE}Step 2: Getting App ID...${NC}"
echo ""
echo "Get your App ID from:"
echo "https://github.com/settings/apps/pulser-hub"
echo ""
read -p "Enter your pulser-hub App ID: " APP_ID

if [ -z "$APP_ID" ]; then
    echo -e "${RED}❌ App ID required${NC}"
    exit 1
fi

echo -e "${GREEN}✅ App ID: $APP_ID${NC}"
echo ""

# Step 3: Private Key
echo -e "${BLUE}Step 3: Setting up private key...${NC}"
echo ""
echo "Generate a private key:"
echo "https://github.com/settings/apps/pulser-hub"
echo "Click 'Generate a private key' and save the .pem file"
echo ""
read -p "Enter path to private key .pem file: " KEY_PATH

if [ ! -f "$KEY_PATH" ]; then
    echo -e "${RED}❌ Private key file not found: $KEY_PATH${NC}"
    exit 1
fi

# Read the private key
PRIVATE_KEY=$(cat "$KEY_PATH")

echo -e "${GREEN}✅ Private key loaded${NC}"
echo ""

# Step 4: Create .env file
echo -e "${BLUE}Step 4: Creating .env file...${NC}"

if [ -f ".env" ]; then
    echo -e "${YELLOW}⚠️  .env already exists${NC}"
    read -p "Overwrite? (y/N) " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        echo "Skipping .env creation"
        exit 0
    fi
fi

cat > .env << EOF
# pulser-hub GitHub App Configuration
# Generated by setup-pulser-hub.sh

GITHUB_APP_ID=$APP_ID
GITHUB_INSTALLATION_ID=$INSTALLATION_ID

# Private key
GITHUB_PRIVATE_KEY="$PRIVATE_KEY"

# Server configuration
PORT=8000
HOST=0.0.0.0
LOG_LEVEL=info
EOF

# Secure the file
chmod 600 .env

echo -e "${GREEN}✅ .env file created${NC}"
echo ""

# Step 5: Update server.py default
echo -e "${BLUE}Step 5: Updating server.py default App ID...${NC}"

if [ -f "server.py" ]; then
    # Update the default App ID in server.py
    sed -i.bak "s/GITHUB_APP_ID = int(os.getenv(\"GITHUB_APP_ID\", \"[0-9]*\"))/GITHUB_APP_ID = int(os.getenv(\"GITHUB_APP_ID\", \"$APP_ID\"))/" server.py
    rm -f server.py.bak
    echo -e "${GREEN}✅ server.py updated${NC}"
else
    echo -e "${YELLOW}⚠️  server.py not found${NC}"
fi

echo ""

# Step 6: Test configuration
echo -e "${BLUE}Step 6: Testing configuration...${NC}"

if command -v python3 &> /dev/null; then
    echo "Testing JWT generation..."

    python3 << 'PYTHON_TEST'
import os
import jwt
import time
from dotenv import load_dotenv

load_dotenv()

app_id = os.getenv("GITHUB_APP_ID")
private_key = os.getenv("GITHUB_PRIVATE_KEY")

if not app_id or not private_key:
    print("❌ Environment variables not loaded")
    exit(1)

try:
    payload = {
        'iat': int(time.time()),
        'exp': int(time.time()) + (10 * 60),
        'iss': int(app_id)
    }
    token = jwt.encode(payload, private_key, algorithm='RS256')
    print(f"✅ JWT generated successfully (length: {len(token)})")
    print(f"✅ Configuration is valid!")
except Exception as e:
    print(f"❌ JWT generation failed: {e}")
    exit(1)
PYTHON_TEST

    if [ $? -eq 0 ]; then
        echo -e "${GREEN}✅ Configuration test passed${NC}"
    else
        echo -e "${RED}❌ Configuration test failed${NC}"
        echo "Check your App ID and private key"
    fi
else
    echo -e "${YELLOW}⚠️  Python not found, skipping test${NC}"
fi

echo ""
echo -e "${GREEN}🎉 Setup complete!${NC}"
echo ""
echo "Next steps:"
echo ""
echo "1. Test locally:"
echo "   pip install -r requirements.txt"
echo "   python server.py"
echo "   curl http://localhost:8000/health"
echo ""
echo "2. Or deploy to DigitalOcean:"
echo "   doctl apps create --spec app.yaml"
echo "   # Add GITHUB_PRIVATE_KEY and GITHUB_INSTALLATION_ID as secrets"
echo ""
echo "3. Configure AI assistants:"
echo "   Edit ~/.claude/mcp-config.json"
echo ""
echo "See docs/PULSER_HUB_SETUP.md for detailed instructions"
